;; openvr.xtm
;;
;; Author: David Tin Nyo
;; Keywords: virtual reality openvr valve htc vive
;;
;; simple example for OpenVR
;; (HTC Vive not included)
;;

;;; Code:

;;(sys:load "libs/external/glfw3.xtm")

(sys:load "libs/contrib/openvr.xtm")

;; initialize
(bind-val pError i32* 1)
(bind-val appType i32 1) ;; VR_Scene
(bind-val pHmd intptr_t (VR_InitInternal pError appType))
;; wait a bit
(sys:sleep (* 10 44100))
;; shutdown
(bind-val temp i8* (VR_ShutdownInternal))
;; early quit
(quit 0)


;; the rest of this taken from Andrew Sorensen
;; and the xtmrender2.xtm example
;; 
(bind-val width i32 1024)
(bind-val height i32 768)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_compatibility_window width height)))

(sys:load "libs/external/assimp.xtm")

;; add a light and a camera
(bind-func prerender:XTMRENDERCB
  (lambda (frame shader m v p data)
    (xtm_light_pos 1 10.0 10.0 15.0)
    (xtm_light_tgt 1 1.0 3.0 0.0)
    (xtm_light_up 1 0.0 1.0 0.0)        
    (xtm_light_diffuse 1 1.0 0.9 0.7 1.0)
    (xtm_light_power 1 30.0)
    (xtm_light_angle 1 60.0)
    
    (xtm_camera_pos (* 10.0 (cos (* .02 (i64tof frame)))) 7.0 15.0)
    (xtm_camera_tgt 0.0 3.0 0.0)
    (xtm_camera_up 0.0 1.0 0.0)
    void
    ))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (let ((nodes:xtm_node** (cast data xtm_node**)))
      (scale_matrix m 1.5 1.5 1.5)
      (translate_matrix m 2.0 -1.9 0.0)                  
      (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 0) shader m v p)
      (fill_identity_matrix m)
      (xtm_update_matrices shader m v p)      
      (xtm_draw_model (pref nodes 1) shader m v p)
      (xtm_draw_model (pref nodes 2) shader m v p)
      void)))

(bind-func gl_render
  (let ((models:xtm_node** (alloc 3)))
    (lambda (model1:xtm_node* model2:xtm_node* model3:xtm_node*)
      (if (null? model1)
          (println "gl_render recieved null pointer for model1 - did you load the model successfully?"))
      (if (null? model2)
          (println "gl_render recieved null pointer for model2 - did you load the model successfully?"))
      (if (null? model3)
          (println "gl_render recieved null pointer for model3 - did you load the model successfully?"))
      (pfill! models model1 model2 model3)
      (xtm_render prerender:XTMRENDERCB render:XTMRENDERCB null null (cast models i8*))
      void)))

(bind-val model_path i8*
  (cstring (cat2 (String (sys_sharedir)) (String "/assets/models/"))))
(bind-val peppino xtm_node*
  (assimp_load_model model_path "peppino.dae" aiProcess_Triangulate))
(bind-val scene xtm_node*
  (assimp_load_model model_path "scene.dae" aiProcess_Triangulate))
(bind-val dome xtm_node*
  (assimp_load_model model_path "dome_cut.dae" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))

(xtm_render_setup
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_render peppino scene dome)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...
(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
